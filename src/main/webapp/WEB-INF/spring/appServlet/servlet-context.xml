<?xml version="1.0" encoding="UTF-8"?>
		<!-- XMLNAMESPACE=라는뜻이다. -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<!--  기본 NAMESPACE는 MVC이다 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @CONTROLLER 어노테이션이 붙은 클래스가 사용자 요청을 처리할수있도록하는것이다. -->
	<annotation-driven />
	<!--얘를 예로들면 MVC
		MVC:ANNOTATION-DRIVEN 이렇게된다
		MVC네임스페이스에 어노테이션드리븐이다.
	
	  -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적파일에 대한 요청 및 LOCATION 을 MAPPING한다 -->
	<!-- 와일드카드 설명 만약에 /FOO/**이렇게되있다면 /FOO/A,/FOO/B/A등등 푸다음모든요청을 처리할수있게해준다는것이다.  -->
	<!--  와일드카드의* 아스타리크가 하나라면 /FOO/A는되지만 그이후의디렉토리는 처리할수없다. -->
	<resources mapping="/resources/**" location="/resources/" />



	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!--  VIEW 단의 JSP를찾기위한 VIEWRESOLVER빈 등록구문 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- BASE-PACKAGE 하위의 어노테이션을 검색 /처리 (@COMPONENT,@AUTOWIRED,등등이있다 밑에 스캔에 호버하면나온다. -->
	<context:component-scan base-package="com.hojae.spring" />
	
	<!-- #12.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean 
			id="multipartResolver" 
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<!-- 
			multipart/form-data 요청당 최대 파일 크기는 50MB(50 * 1024 * 1024)이다. 
			default: -1(제한없음)
		-->
		<beans:property name="maxUploadSize" value="52428800" /> 
		<!-- 파일하나당 최대용량은 10MB(10 * 1024 * 1024)이다. 기본값: -1(제한없음) -->
		<beans:property name="maxUploadSizePerFile" value="10485760" /> 
		<!-- 메모리 사용최대용량. 기본값 10240. 이값을 넘어가면, 임시파일로 저장함. -->
		<beans:property name="maxInMemorySize" value="10240" /> 
	</beans:bean>
	
	
	
	
	<!-- #9. interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean 
				id="loggerInterceptor" 
				class="com.hojae.spring.common.interceptor.LoggerInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path="/board/boardForm.do"/>
			<mapping path="/board/insertBoard.do"/>
			<beans:bean 
					id="loginInterceptor"
					class="com.hojae.spring.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- #14.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <beans:bean 
    	id="viewResolver" 
    	class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
    <beans:bean 
		id="jsonView" 
		class="net.sf.json.spring.web.servlet.view.JsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8" />
	</beans:bean>
	
</beans:beans>
